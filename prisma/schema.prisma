// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    tables        Table[]
    sheets        Sheet[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Sheet {
    id          Int      @id @default(autoincrement())
    tables      Table[]
    name        String
    createdAt   DateTime @default(now())
    createdBy   User     @relation(fields: [createdById], references: [id])
    createdById String
}

model Table {
    id          Int      @id @default(autoincrement())
    sheetId     Int
    name        String
    sheet       Sheet    @relation(fields: [sheetId], references: [id])
    headers     Header[]
    rows        Row[]
    createdAt   DateTime @default(now())
    createdBy   User     @relation(fields: [createdById], references: [id])
    createdById String
    views       View[]
}

model Row {
    id          Int      @id @default(autoincrement())
    tableId     Int
    table       Table    @relation(fields: [tableId], references: [id])
    values      Json // Record<string, string>
    rowPosition Int
    createdAt   DateTime @default(now())

    @@unique([tableId, rowPosition])
}

enum HeaderType {
    TEXT
    NUMBER
}

model Header {
    id             Int        @id @default(autoincrement())
    tableId        Int
    table          Table      @relation(fields: [tableId], references: [id])
    name           String
    headerPosition Int
    type           HeaderType @default(TEXT)

    @@unique([tableId, headerPosition])
}

model View {
    id        Int      @id @default(autoincrement())
    name      String
    tableId   Int
    table     Table    @relation(fields: [tableId], references: [id])
    createdAt DateTime @default(now())
    rowOrder  Int[]
    filters   Filter[]
}

enum FilterType {
    isEmpty
    isNotEmpty
    contains
    greaterThan
    lessThan
}

model Filter {
    id       Int        @id @default(autoincrement())
    columnId String
    type     FilterType
    value    String?
    view     View       @relation(fields: [viewId], references: [id])
    viewId   Int
}
